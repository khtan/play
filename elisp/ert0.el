;; emacs -batch -l ert -l ert0.el -eval '(ert-run-tests-batch-and-exit "t3")'
(require 'ert)
(ert-deftest t0-how-to-print-string()
  (let ((msg "t0-how-to-print-string")(msg2 "hello world"))
    (print "-- print")
    (print msg)
    (print msg2)
    (print "-- prin1")
    (prin1 msg)
    (prin1 msg2)
    (print "----- princ")
    (princ msg)
    (princ msg2)
    (print "----- pp")
    (pp msg)
    (pp msg2)
    (print "----- message")
    (message "message: %s %s" msg msg2)
  )
)


(ert-deftest t1-how-to-print-list()
  (let ((msg '(rose violet daisy buttercup))(msg2 "world"))
    (print "-- print")
    (print msg)
    (print msg2)
    (print "-- prin1")
    (prin1 msg)
    (prin1 msg2)
    (print "----- princ")
    (princ msg)
    (princ msg2)
    (print "----- pp")
    (pp msg)
    (pp msg2)
    (print "----- message")
    (message "message: %s %s" msg msg2)
))

(ert-deftest t2-how-to-print-boolean()
  (let ((msg t)(msg2 nil))
    (print "-- print")
    (print msg)
    (print msg2)
    (print "-- prin1")
    (prin1 msg)
    (prin1 msg2)
    (print "----- princ")
    (princ msg)
    (princ msg2)
    (print "----- pp")
    (pp msg)
    (pp msg2)
    (print "----- message")
    (message "message: %s %s" msg msg2)
))

(ert-deftest t3-how-to-print-boolean()
  (let ((msg (= 1 1))(msg2 (= 1 2)))
    (print "-- print")
    (print msg)
    (print msg2)
    (print "-- prin1")
    (prin1 msg)
    (prin1 msg2)
    (print "----- princ")
    (princ msg)
    (princ msg2)
    (print "----- pp")
    (pp msg)
    (pp msg2)
    (print "----- message")
    (message "message: %s %s" msg msg2)
    ))

;; (ert-deftest t0-hello-world()
;;   (let ((msg "hello world"))
;;     (should (equal msg "hello world"))
;;     (message msg)
;;   )
;; )
;; (ert-deftest t1-list-of-flowers()
;;   (let ((flowers `(rose violet daisy buttercup)))
;;     (message "flowers: %s" flowers)
;;     ))

; stdbuf -i0 -o0 -e0 emacs -batch -l ert -l ert0.el -f ert-run-tests-batch-and-exit
