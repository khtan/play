* root
** venv usage
*** first time setup
1. Switch to the project dir: cd zdiscovery-load-tests
2. Create a new virtual environment called venv: python -m venv venv
3. Activate the virtual environment (see tables below)
4. Install packages: pip install -r requirements.txt
5. Make cli project editable : pip install -e . --exclude-editable
6. Make a copy of config_template.json and name it config.json
7. Populate config.json with the appropriate values for each field
*** activation
Table shamelessly stolen from the venv docs.

| Platform | Shell           | Command to activate virtual environment |
| POSIX    | bash/zsh        | $ source ./venv/bin/activate            |
|          | fish            | $ source ./venv/bin/activate.fish       |
|          | csh/tcsh        | $ source ./venv/bin/activate.csh        |
|          | PowerShell Core | $ ./venv/bin/Activate.ps1               |
| Windows  | cmd.exe         | C:> .\venv\Scripts\activate.bat         |
|          | PowerShell      | PS C:> .\venv\Scripts\Activate.ps1      |

*** Activate Virtual Environment in VS Code
VS Code should ask you if you want to activate the new virtual environment. If it doesn't you can activate the virtual environment by clicking on the Python interpreter version in the bottom left of the VS Code window, or by running the VS Code command for it: Ctrl+Shift+P and type Python: Select Interpreter

** Results
*** [[https://www.youtube.com/watch?v=qkxf583t4Vc&ab_channel=ArjanCodes][video: why u should think twice b4 using returns in Python]]
  not using try-catch exceptions is not a Python idiom
  Valid cases to use Returns
  education, ie learnign
  simplify cross language development by using the same FP paradigm patterns
  internal took, clearly defined rules and guidelines for style and package use?
  1. proof of concept, new style of coding
  2. legacy parts may use exceptions

     Use Returns everywhere or no where
     Not staple in Python currently
*** [[https://returns.readthedocs.io/en/latest/pages/quickstart.html][returns 0.26.0 doc/Quickstart]]
*** [[https://github.com/dry-python/returns?tab=readme-ov-file][github dry-python/returns]]

** icB
*** checklist
|    |                      |
| OK | run pytest in vscode |
|    |                      |

** icC
*** motivation
Remove all the __pycache__ and other folders that do not need to be checked in
*** todo
1. refactor the .css hierarchy and simplify
2. introduce enum class for DisplayType safety
3. more enums : generate output file
   -o <file name>|sequential|
   sequential will use <file name>.<n>.html
   Display the output? by default or by switch?

*** sc name clash
sc is system control manager monitoring tool in c:\system\windows32
What to call this tool
sc -- see character
icc -- iching character?
*** ds : This is a command line .py file that sets up the logging and argparse so as to call the view_file appropriately.
Reimplement the global code into functions setup_logging and setup_argparse so that the functions can be reused.
This means the global arguments should be set in the calling functions and passed into these 2 setup functions.
**** new sf.py:
""" View hexagrams on Windows """
import sys
import os
import logging
from argparse import ArgumentParser, SUPPRESS, RawDescriptionHelpFormatter
from typing import List

# constants
PROGRAM = 'icC/cli/sf.py'
EPILOG = """
Notes: 01 Qian-Initiating, 02 Kun-Responding, 29 Kan-Dark, 30 Li-Bright, 51 Zhen-Action, 52 Gen-Still, 57 Xun-Proceed Humbly, 58 Dui-Joyful
       63 Ji Ji-Already Fulfilled, 64 Wei Ji-Not Yet Fulfilled
Sample Usage: TBD
"""

def setup_logging(default_level: str = 'WARNING') -> logging.Logger:
    """Set up logging configuration and return logger instance."""
    log_level_name = os.getenv('LOG_LEVEL', default_level).upper()
    
    try:
        log_level = getattr(logging, log_level_name)
    except AttributeError:
        log_level = logging.WARNING
        
    logging.basicConfig(level=log_level)
    return logging.getLogger(__name__)

def setup_argparse(prog: str, description: str, epilog: str) -> ArgumentParser:
    """Set up argument parser with common configuration."""
    ap = ArgumentParser(
        prog=prog,
        formatter_class=RawDescriptionHelpFormatter,
        description=description,
        add_help=False,
        epilog=epilog
    )
    
    required = ap.add_argument_group('required arguments')
    required.add_argument('-x', '--hexa',
        type=int, choices=range(1, 65), nargs='+', required=True,
        help='Hexagram numbers 1-64')
        
    optional = ap.add_argument_group('optional arguments')
    optional.add_argument('-h', '--help', action='help', default=SUPPRESS,
                        help='show this help message and exit')
    
    return ap

# Add the lib directory to the path so we can import it
lib_path = os.path.join(os.path.dirname(__file__), '..')
sys.path.insert(0, lib_path)
from lib.core import view_file  # pylint: disable=C0413

def to_padded_string(n: int) -> str:
    """ Convert a number to a zero-padded string """
    return f"{n:02}"

def get_hexagram_path(n: int) -> str:
    """ Get the path to the hexagram image """
    hexname = to_padded_string(n)
    return r"I:\My Drive\lib-home\religion\iching\iching-cards" + "\\" + hexname + ".jpg"

def main() -> None:
    """ Main function for the CLI tool """
    logger = setup_logging()
    parser = setup_argparse(PROGRAM, __doc__, EPILOG)
    
    logger.debug("lib_path: %s", lib_path)
    
    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)
        
    options = parser.parse_args(sys.argv[1:])
    for hexagram_num in options.hexa:
        hexpath: str = get_hexagram_path(int(hexagram_num))
        view_file(hexpath)

if __name__ == "__main__":
    main()
# EOF

*** ds : Below is a command line .py file
There are 3 refactorings to modify the source.
The refactorings are intended to create reusable functions for future command lines.
1. Write a function setup_logging with appropriate parameters so that main can call it and pass in the global variables.
2. Write a function setup_command_parser similarly
3. Write a function setup_path to encapsulate the modification of os.path, again so that the function can
   be called in main
sf.py:

*** I have a simple python project with folders for library (lib), unittest (unittest) and command line (cli)
I am using ./setup.py to development and I install with "pip install -e " so that the development env is live.
How do I run the unittests?

*** The utiliity function get_hexagram_unicode is already implemented.
def get_hexagram_unicode(hexagram_number: int) -> Result[str, errstr]

Use it to write a function generate_html that takes a list of hexagram numbers
and generate a simple html file that displays the unicode characters in a circle.
The circle should size itself or be related to some center, so that absolute coordinates
do not need to be referenced.

def generate_html(hex_numbers) ...
*** build_css_square and build_css_circle takes a is_combined parameter in order to generate
html output for display_type == square, circle and all. Is it possible to combine them so
as to no longer need is_combined?
*** Consider the two css definitions below.
Go over each corresponding line and compare why one item requires it and why the other does not.
Are there any lines are not superflous and can be removed?

.circle .center-char {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  font-size: 2.5rem;
  font-weight: bold;
}
.square-container .center-char {
  font-size: 2.5rem;
  font-weight: bold;
  margin-bottom: 20px;
}
*** Consider the two css definitions below.
Go over each corresponding line and compare why one item requires it and why the other does not.
Are there any lines are not superflous and can be removed?

.hex-square {
  font-size: 2rem;
  text-align: center;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  min-width: 60px;
}

.hex { /* circle */
  position: absolute;
  left: 50%;
  top: 50%;
  transform-origin: 0 0;
  font-size: 2rem;
  text-align: center;
}

*** Explain which width/height will be in effect. Which should I delete?
.combined-container .circle {
  width: 80vmin;
  height: 80vmin;
}
.circle {
  position: relative;
  width: 50vmin;
  height: 50vmin;
  border-radius: 50%;
  margin: auto;
}
